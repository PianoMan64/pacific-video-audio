@page "/cart"
@using PVA.Application.Services
@using PVA.Core.Entities
@inject ICartService CartService
@inject CartStateService CartStateService
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Shopping Cart - Pacific Video & Audio</PageTitle>

<div class="cart-page">
    <div class="container">
        <div class="cart-header">
            <h1>Shopping Cart</h1>
            @if (cartItems.Any())
            {
                <p class="cart-summary">@cartItems.Sum(c => c.Quantity) items in your cart</p>
            }
        </div>

        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Loading your cart...</p>
            </div>
        }
        else if (!cartItems.Any())
        {
            <div class="empty-cart">
                <div class="empty-cart-icon">
                    <i class="icon-cart-empty"></i>
                </div>
                <h2>Your cart is empty</h2>
                <p>Browse our products and add items to your cart to get started.</p>
                <a href="/products" class="btn btn-primary">Continue Shopping</a>
            </div>
        }
        else
        {
            <div class="cart-content">
                <div class="cart-items">
                    @foreach (var item in cartItems)
                    {
                        <div class="cart-item" id="cart-item-@item.ProductId">
                            <div class="item-image">
                                @if (item.Product?.ImageUrls?.Any() == true)
                                {
                                    <img src="@item.Product.ImageUrls.First()" alt="@item.Product.Name" />
                                }
                                else
                                {
                                    <div class="no-image">
                                        <i class="icon-image"></i>
                                    </div>
                                }
                            </div>
                            
                            <div class="item-details">
                                <h3 class="item-name">@item.Product?.Name</h3>
                                <p class="item-sku">SKU: @item.Product?.SKU</p>
                                @if (!string.IsNullOrEmpty(item.Notes))
                                {
                                    <p class="item-notes">Notes: @item.Notes</p>
                                }
                            </div>
                            
                            <div class="item-price">
                                <span class="unit-price">$@item.UnitPrice.ToString("F2")</span>
                                <span class="price-label">each</span>
                            </div>
                            
                            <div class="item-quantity">
                                <label for="quantity-@item.ProductId" class="quantity-label">Qty:</label>
                                <div class="quantity-controls">
                                    <button type="button" class="qty-btn qty-decrease" 
                                            @onclick="() => UpdateQuantity(item.ProductId, item.Quantity - 1)"
                                            disabled="@(item.Quantity <= 1 || isUpdating)">
                                        <i class="icon-minus"></i>
                                    </button>
                                    <input type="number" id="quantity-@item.ProductId" class="qty-input" 
                                           value="@item.Quantity" min="1" max="99"
                                           @onchange="@((e) => UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                           disabled="@isUpdating" />
                                    <button type="button" class="qty-btn qty-increase" 
                                            @onclick="() => UpdateQuantity(item.ProductId, item.Quantity + 1)"
                                            disabled="@isUpdating">
                                        <i class="icon-plus"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="item-total">
                                <span class="total-price">$@item.TotalPrice.ToString("F2")</span>
                            </div>
                            
                            <div class="item-actions">
                                <button type="button" class="btn-remove" 
                                        @onclick="() => RemoveItem(item.ProductId)"
                                        disabled="@isUpdating">
                                    <i class="icon-trash"></i>
                                    <span>Remove</span>
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div class="cart-summary">
                    <div class="summary-section">
                        <h3>Order Summary</h3>
                        
                        <div class="summary-line">
                            <span class="label">Subtotal (@cartItems.Sum(c => c.Quantity) items):</span>
                            <span class="value">$@cartTotal.ToString("F2")</span>
                        </div>
                        
                        <div class="summary-line">
                            <span class="label">Shipping:</span>
                            <span class="value">FREE</span>
                        </div>
                        
                        <div class="summary-line total">
                            <span class="label">Total:</span>
                            <span class="value">$@cartTotal.ToString("F2")</span>
                        </div>
                    </div>

                    <div class="cart-actions">
                        <button type="button" class="btn btn-outline" @onclick="ClearCart" disabled="@isUpdating">
                            <i class="icon-trash"></i>
                            Clear Cart
                        </button>
                        
                        <a href="/products" class="btn btn-outline">
                            <i class="icon-arrow-left"></i>
                            Continue Shopping
                        </a>
                        
                        <a href="/checkout" class="btn btn-primary">
                            <i class="icon-credit-card"></i>
                            Proceed to Checkout
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<CartItem> cartItems = new();
    private decimal cartTotal = 0;
    private bool isLoading = true;
    private bool isUpdating = false;
    
    // For now, using a hardcoded customer ID. In real implementation, this would come from authentication
    private const int CurrentCustomerId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        try
        {
            isLoading = true;
            
            var items = await CartStateService.GetCartItemsAsync(CurrentCustomerId);
            cartItems = items.ToList();
            
            cartTotal = await CartStateService.GetCartTotalAsync(CurrentCustomerId);
        }
        catch (Exception ex)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Error loading cart:", ex.Message);
            }
            catch
            {
                // Ignore JavaScript errors during prerendering
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        if (newQuantity < 1) return;
        
        try
        {
            isUpdating = true;
            await CartService.UpdateCartItemQuantityAsync(CurrentCustomerId, productId, newQuantity);
            await CartStateService.RefreshCartAsync(CurrentCustomerId); // Refresh the cached state
            await LoadCart();
            
            try
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Cart updated successfully", "success");
            }
            catch
            {
                // Ignore JavaScript errors during prerendering
            }
        }
        catch (Exception ex)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Error updating cart: " + ex.Message, "error");
            }
            catch
            {
                // Ignore JavaScript errors during prerendering
            }
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task RemoveItem(int productId)
    {
        try
        {
            isUpdating = true;
            await CartService.RemoveFromCartAsync(CurrentCustomerId, productId);
            await CartStateService.RefreshCartAsync(CurrentCustomerId); // Refresh the cached state
            await LoadCart();
            
            try
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Item removed from cart", "success");
            }
            catch
            {
                // Ignore JavaScript errors during prerendering
            }
        }
        catch (Exception ex)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Error removing item: " + ex.Message, "error");
            }
            catch
            {
                // Ignore JavaScript errors during prerendering
            }
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task ClearCart()
    {
        if (cartItems.Any())
        {
            try
            {
                isUpdating = true;
                await CartService.ClearCartAsync(CurrentCustomerId);
                await CartStateService.RefreshCartAsync(CurrentCustomerId); // Refresh the cached state
                await LoadCart();
                
                try
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Cart cleared", "success");
                }
                catch
                {
                    // Ignore JavaScript errors during prerendering
                }
            }
            catch (Exception ex)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Error clearing cart: " + ex.Message, "error");
                }
                catch
                {
                    // Ignore JavaScript errors during prerendering
                }
            }
            finally
            {
                isUpdating = false;
            }
        }
    }
}
